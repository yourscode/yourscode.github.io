如何保护对象结构
    1.防扩展: 禁止向对象中添加新属性
        Object.preventExtensions(obj);
    原理: 每个对象内都有一个内部的隐藏属性  extensible : true;
        preventExtensions 将obj内的 extensible改为了false
    2.密封 : 防扩展的同时,进一步禁止删除现有属性,
        Object.seal(obj)
        原理: 1.extensible改为了false
            2.自动将每个属性的configurable改为false
    3.冻结 : 密封的同时禁止修改属性值
        Object.freeze(obj);
                原理: 1.extensible改为了false
                        2.自动将每个属性的configurable改为false
                        3.自动将所有属性的writable改为false


Object.create();
    
    什么是: 创建一个新的对象,继承现有的一个指定父对象,同时还可以为新对象添加现有的属性
    何时: 如果没有构造函数只有父对象,也想创建子对象
    如何创建: 
        1.仅继承:
            var child = Object.create(father)
        2.既继承又扩展自有属性,
            var child = Object.create(father,{
                //和defineProperties的格式是一样的
                属性:{
                    特性: 值;
                }
            })

call()   apply()  bind()
    共同点:  都是替换函数中不想要的this为想要的对象
    何时使用:只要一个函数调用时,其中的this不是想要的,就可以替换,
        1.call/apply  :   强行调用指定函数,并且临时替换函数中的this为指定对象,
            强调:  立即执行,且仅仅执行一次,执行时临时替换,执行后this恢复原样
            how to use :   指定函数.call(替换this,参数值1,参数值2...)
            call  VS   apply 参数值列表
            call()  : 要求传入函数的参数值列表,必须分别传入
            apply():  要求传入的参数列表必须放在数组中整体传入   eg:  指定函数.apply(替换this的对象,arr);
        2.bind : 创建一个和原函数完全一样的函数,并永久绑定函数中的this为指定对象
            何时: 不会立刻调用函数中的this,不是想要的,就可以使用bind创建一个新函数,并且永久绑定,
            how to use : var 新函数 = 原函数.bind(替换this的对象,参数值1,参数值2...);

数组API
 判断:
    every()  :  判断数组中是否所有元素都符合要求
    some()   :  判断数组中是否包含符合条件的元素
    如何:  var bool = arr.every(function(elem,i,arr){
        elem: //当前元素值
        i:    //当前位置
        arr : //当前数组对象
    })
    运行过程: every   会拿着函数在每个元素 上执行一次,只要碰到不满足条件的就退出,并返回false,如果走到头就返回 true

    遍历API 
        forEach() : 对原数组中的每个元素,执行相同的操作
        map() :    取出原数组中的元素值执行相同的操作后,  放回新的数组中,原数组保持不变
        如何: arr.forEach(function(elem,i,arr){
            arr[i] = 新值;
        })

        arr.map(function(elem,i,arr){
            arr[i] = 新值;
        })

    过滤和汇总
        过滤:  选取出原数组中符合条件的元素,组成新的数组,原数组保持不变
        怎么使用: var sub = arr.filter(function(){
            return 判断条件;
        })
        汇总: 将数组中每个元素的值,汇总计算出结果
        how to use : var result = arr.reduce(function(prev,elem,i,arr){
            //prev : 截止到目前的元素的临时汇总值
            return prev + elem;
        },base)    //base:   基础的值,会把  base+result 




>>>>>>>>>>>>>>>--------------ES6------------<<<<<<<<<<<<<<<<<

let是代替var的
    为什么:  2个问题   声明提前,没有块级作用域
    要求: 
        1.不会声明提前
        2.添加了块级作用域
    if for  
    为什么: 避免块内变量影响外部
    let + for闭包效果
    参数增强
      定义函数时,可以提前为部分参数变量指定默认值
      如何: function(参数1,参数2,参数3...参数n = 默认值){      }
      注意: 有默认的参数必须放到参数的结尾
      原理: 参数 n = 参数 || 默认值;
    剩余参数:  代替arguments
        arguments的两个问题 
        1.不是数组
        2.不能使用数组的API
        3.必须完整获得所有参数,不能有选择的分段获取
        如何定义: function(参数1,参数2,...,...数组名){

        }
    剩余参数的优点:  1.纯正的数组类型,
                    2.可以随意选择开始获取参数的位置,
    散播: 将一个数组打散后,分别传入函数中
     何时使用: 如果一个函数需要多个参数,而给定的值却来自一个数组时
     如何:  fun.apply(obj,数组)

箭头函数: 简化一切回调函数或者是匿名函数自调,
    1.所有箭头函数(回调/自调)都可去function,加  =>  
    2.如果参数只有一个可以继续省略  ()
    3.如果函数体只有一句话,可省略  {}
    如果唯一一句话是return  
    特点: 内外公用同一个this,


