基本过滤(内置过滤): 
:first  :last  :eq  :lt :gt    :even(偶数)  :odd(奇数)
特点: 先将符合条件的所有元素提升到一个集合中,,统一从零开始编号,与元素所在父元素无关
属性选择器: 同CSS
[属性名]
[属性名=值]
[属性名^=值]  :  必须以这个值开头
[属性名$=值]  :  必须以这个值结尾
[属性名*=值]  :  属性名包含这个值
[属性名!=值]  :  属性名不等于这个值
而且: selector1selector2  表示既满足selector1又满足selector2
可见性过滤
    :visible
    :hidden    只能找到type=hidden和display=none
内容过滤
    1.用元素的文本作为判断条件
        :contains(text)是否包含text文本内容
    2.用元素的子元素特征作为判断条件
        :has(selector)当前的子元素中是否有
    空元素/非空元素
        :parent
        :empty
    状态过滤: 
        :enable   :disabled  :checked    :selected
    表单元素过滤
        :input  选择






修改: 内容:
    html代码片段:$(...).html([新的html代码片段])    //中括号可写可不写
    纯文本内容: $(...)text([新的文本内容])                       textContent
    表单元素的内容: $(...).val(新的值)                          value
    清空元素内容:   $(...).empty()
    属性: 
        标准属性: $(...).attr("属性名"[,"属性值"])
        状态属性: $(...).prop("属性名"[,bool])
        自定义扩展属性: $(...).data("属性名"[,值])
    
样式: 
    内联样式: $(...).css("css属性名"[,"值"])
    强调: 修改样式时,等效于.style.css修改内样式
    获取属性: 等效于getComputedStyle,可获得计算后的完整样式中的任意一个属性
    问题: 一套样式包含多个css属性,用css修改的话很繁琐
    .addClass("class名")
    .removeClass("class名")
    .hasClass("class名")

    .toggleClass("class名");    有则不加没有则加上括号里面的class
    按节点间关系查找
        父子关系
            $(...).parent          .parentElement
            $(...).children        .children
                2个增强:    $(...).children("选择器")  只获取符合selector要求的子元素            //$(..).children.first()       .firstChild
                            $(...).find("选择器")可在所有 后代中查找符合要求的元素               //$(..).children.last()       .lastChild
        兄弟: 
            $(...).next()                .nextElementSibling
            $(...).nextAll(["选择器"])    下面的所有的[有那个选择器的]
            $(...)prev                   .previousElementSibling
            $(...).prevAll(["选择器"])     前面的所有的[有那个选择器的]
            $(...).siblings(["选择器"])
    添加,删除,替换,查找
        添加: 
            1.用HTML代码片段创建新元素
                var $新元素 =$("html片段")
            2.将新元素添加到DOM树
                $(appent).append("$新元素")     //返回的是parent
                简化 : $(parent).append("html片段")
                $(parent).append("$新元素")   把创建的新元素插入到父元素第一个子元素前面
                $新元素.appendTo(parent)        //返回新元素
                简化: 
                $child.before($新元素)     //指定元素前插入
                $child.after($新元素)      //指定元素后插入
            3.删除:
                $(...).remove()
            4.替换:
                $(现有元素).replceWith(新元素)               //返回现有元素
                $(新元素).replaceAll(现有元素)               //返回新元素
                $(...).clone()      仅仅克隆属性和样式,不克隆行为
                $(...).clone(true)    即克隆属性又克隆行为