切割
    简单切割
    按照固定的分隔符将字符串切割为多段子字符串
    var subs = str.split("切割符");
    复杂切割:
      var subs  = str.split(/正则/);
RegExp
    专门保存一条 正则表达式的对象,并提供了用正则表达式执行验证和查找的API
    使用场景: 只要在程序中保存一条正则表达式,都要用正则表达式对象
    如何使用: 
        字面量:  var reg = /正则/ig
        
    使用场景:  只要正则表达式是固定不变的
    问题: 正则表达式是固定不变的,不支持动态生成
    2.使用new:
       var reg = new RegExp("正则表达式","ig");
       使用场景:   如果正则表达式需要用程序动态生成
    RegExp的两个API 
    验证格式: 
        var bool = reg.test(str);
        检查字符串str格式，是否符合正则reg的要求
        问题：默认，只要字符串中部分规则和正则相符，就返回true，不要求完全匹配
        解决: 前加^ 后加 $  意思为从头到尾完全匹配
    
    2.即找到所有关键词内容,又找到位置
    var arr = reg.exec(str);
    在str中查找下一个符合reg要求的关键词的内容和位置
    返回值: arr[0:关键词,index:位置]
    如果找不到,返回null
    如果想找所有: 只要while反复调用reg.exec即可,exec可自动跳到下一个位置
Math
  什么是: 专门封装数学计算的常量和API的对象
  使用场景 ;  只要使用 数学计算时
  怎么使用:  不能new ! 所有属性和API都用大写的Math直接调用
API 
  -取整:  
     上取整: Math.ceil();
     下取整: Math.floor();   //只能去除纯数字
            parseInt(str);    //可以去掉数字后面的非数字
     四舍五入取整: Math.round();   //返回数字可以直接做计算,缺点: 只能取整不能规定小数位
     Num.toFixed(需要保留多少小数)    //当保留的小数位0时,也是四舍五入,可以 灵活规定保留的小数位
                                     //缺点:返回的是字符串
自定义:   13
乘方和开平方
平方:
   Math.pow(底数,幂);
开方:
   Math.sqrt(mun);

最大值,最小值
   Math.max(值1,值2);
   Math.min(值1,值2);
问题: 不支持从数组中获得最大值和最小值
解决; Math.max(...arr);     //  ... 
   eg   var arr= [12,34,56,656];
        Math.max(...arr);
        656
随机数:
   Math.random();   //默认0到1之间的小数
   在min~max之间取随机数:   parseInt(Math.random()*(max-min+1)+min);
   //     60     <       <      41  +  60

5.三角函数
    Math.atan(对边/临边);
    问题: 无法区分象限;
    解决: 今后算角度一律用atan2
    Math.atan2(对边长,临边长)








Date
存储⼀个时间，并提供操作时间的API
何时使⽤：只要在程序中存储或计算时间都⽤⽇期对象
如何使⽤：创建4种
1. 创建⽇期对象，并⾃动获得当前系统时间
var now=new Date();
强调：因为js是在客户端执⾏，所以new Date()只能获得客户端系统时间
2. 创建⽇期对象，并保存⾃定义时间
var date=new Date(“yyyy/mm/dd h:mm:ss”)；
3. 复制⼀个⽇期对象
问题：⽇期的计算都是直接修改原⽇期对象
解决：如果希望同时保存计算前后的开始和结束时间，都要先复制开始时间，再⽤副本计算结
束时间
var date2=new Date(date1)；
4. 将毫秒数，转化为当地时间
var date=new Date(ms)；
将数据库中保存的毫秒数，转化为⼈看得懂的⽇期对象，且换算成当地时间

    
    本质:其实计算机中保存的不是字符串,而是一个毫秒数 ,  
     17970年1月1日(0时区国际标准时间)到至今的毫秒数.
     字符串的缺点: 1.受时区的影响,不便计算
     毫秒数的优点: 不受时区影响,极其便于计算  缺点:  人看不懂
   所以,今后数据库中保存时间都用毫秒数

    8个单位
      FullYear      Month          Date(一个月里面的天数)              Day(星期)
      Hours         Minutes        Seconds          Milliseconds
   每个单位都有一对get/set方法
   其中getxxx()  用于获取单位的值
   setxxx();  专门用于设置单位的值
   注意: setxxx(num);  可以自动计算时间进制
   day  没有set方法
   取值范围:   Month : 0~11;    计算机的月份都要比现实中小1
   Date:  1~31;
   Day : 0~6;     零顶替了星期日
   Minuts/Seconds:  0~59
   计算: 两个日期对象可以相减,结果是毫秒数:  
