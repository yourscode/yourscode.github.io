js组成
   (1) 核心 (ECMAScript)
   (2)DOM文档 对象模型,提供了组允许操作界面元素的函数和属性
   (3)BOM浏览器对象模型,提供了一组允许操作浏览器的函数和属性
 js的特点
   1,语法类似于c,java , php
   2,无需编译, 由js解析器直接运行
   3,弱类型语言
   4,面向对象的
5JavaScript的基础语法
    1,如何使用js
    2,独立安装的js解析器(node)
    3,嵌入在浏览器内核中的js解析器
             (1)浏览器内核
                   浏览器内核负责界面的渲染,由两部分组成
                   内容排版引擎 ----解析 html/CSS
                   脚本解析引擎 ----JavaScript
            HTML元素事件执行js脚本
            在 <script>中编写脚本并执行,嵌入一对<script></script>,并且在<script></script>中编写脚本
            使用外部的js脚本文件(***.js)
                1,创建脚本文件并编写js代码
                2,在使用的网页上引用js脚本文件
    小练习: 1,创建网页在网页中 增加一对<script></script>标记
           2,创建一个按钮,为按钮添加点击事件,在控制台输出自己的年龄
           3,在外部js文件中,完成上述两个步骤的内容
6,js通用语法规范
语句: 可执行的最小单元
必须以  ;   结尾
js里面严格区分大小写,所有的符号必须是英文状态
注释   //  单行注释    
      /*多行注释*/
js的变量声明
     1,变量声明  var 变量名;
     2,为变量赋值   变量名=值;
     3,声明完直接赋值    var 变量名=值;
  注意: 声明变量时可以不使用var,但是不推荐
        如果声明变量,但未赋值,则默认为undefined
       允许一条语句中声明多个变量,用  ,   隔开
变量名的命名规范
  1,不允许使用js的关键字和保留关键字
  2,不允许以数字开头
  3,可以包含字母,数字,下划线,$符号开头
  4,最好是见名知意
  5,尽量使用小驼峰命名法   eg: var userName;    大驼峰命名法 :  var UserName;

变量的使用  
    1,声明变量未赋值,默认为undefined
    2,使用未声明过的变量,会直接报错
    3,赋值操作
         变量出现等号=的左边,一律是赋值操作   eg: var uname = "张三";
    4,取值操作
        变量只要没出现在=等号的左边,一律是取值操作
          eg: var uname = "张三";
              var newname = uname;
    特殊: 普通模式下: 强行给未声明变量赋值,不会报错!会自动创建该变量
          严格模式下: 比普通js运行要求更严格的机制
                     1,严格禁止给未声明的变量赋值的
                     怎么去启用严格模式呢?   在代码开头的位置:   "use strict"
常量
  什么是常量?
     在程序中一经声明就不允许被修改的数据就是常量
  语法
    const 常量名 = 值;
    注意: 常量在程序中,通常用全大写形式   eg: const PI = 3.14;
    特殊: 强行修改变量的值
          普通模式下: 不报错但也不修改-----静默失败
          严格模式下: 报错!    所有的静默失败都升级为错误
                     怎么去启用严格模式呢?   在代码开头的位置:   "use strict"
数据类型--掌握
  1,数据类型
       数据类型的作用: 数据类型规定了数据在内存中所占用的空间.   eg:整数在内存中占了4个字节,小数占了8个字节
  2,数据类型详解
       1,原始类型(基本类型)
            (1)number 类型   作用: 作用可以表示32位(4字节)的整数,也可以表示64位(8字节)浮点数(俗称小数)
            (2)string 类型   表示一系列的文本字符数据,比如姓名,性别,地址等字符串中的每一个字符,都是unicode的字符,标点和数字组成
                            Unicode码 : 每个字符在计算机中都有唯一一个码表示的(十六进制)
                            查找一个字符的Unicode的码: 可以借助js的函数   charCodeAt();
                            eg: "胡".charCodeAt().toString(16);
                                "80e1"
                               "胡".charCodeAt().toString(2);
                               "1000000011100001"
                            如何将Unicode码转换成汉字: 通过转译字符  \u  来实现
                            eg:   console.log("\u80e1");
                                  VM194:1 胡
                            汉字的Unicode码的范围: "\u4e00" ~ "\u9fa5"
                            js中特殊字符需要转译字符
                              \n:  换行
                              \t: 制表符(缩进)
                              \":"
                              \':'
                              \\:\
                              字符串在使用过程中,需要使用""或者''括起来
                             
                       eg:  console.log("这算是js的\"转译字符\"");          var n = String.fromCharCode(65);     //A
                            这算是js的"转译字符"
            (3)boolean 类型/
                在程序表示真和假的结果 取值: true或者false
                在参与数学运算时,true可以当做1来运算false可以当做0来运算的   eg: var result = 24 + true;    //25
            (4)null 类型
                 表示尚不存在的值
                 至于一个值,即null,如果函数或者方法要返回的是对象,找不到该对象时,就会返回null
            (5)undefined 类型
                表示的数据不存在  只有一个值,即undefined
        2,引用类型
            无法保存在变量本地的数据类型
    数据类型转换
       隐式转换(自动)
       不同





       强制转换
         1,toString();   将任意类型的数据转换为字符串
         语法: var result = 变量
         2,parseInt() 将任意类型的数据转化为整数
         语法:var result = parseInt(数据);
         如果转换不成功,结果为NaN
         var str = "abc123";
         var str1 = parseInt(str);    //结果为NaN  (not a number)
         3,parseFloat()  将任意类型的数据转化为小数
         语法: var result = parseFloat(数据);
         如果转换不成功,将结果为NaN
         4,number()  将任意类型的数据转化为number
      运算符和表达式
        (1)什么是表达式
            有运算符 链接 操作数所组成的式子就是表达式,任意一个表达式都是有结果的
            15 + 18    (15和18就是操作数, + 就是运算符)
        var num = 5;

                   5     6(6)   6(7)    8(8)    8(9)  9                     
        var ret = num+ ++num + num++ + ++num + num++ +num;
        结果42
          
   "3a" > 10  结果
   Number("3a")   -->NaN    
   注意点: NaN与任何数比较运算时结果都是false
   isNaN()函数  判断一个数据是否为数字/非数字
   语法: isNaN(数据);
   作用: 判断指定数据是否为非数字,如果不是数字,返回值为true,是数字的话返回值为false     