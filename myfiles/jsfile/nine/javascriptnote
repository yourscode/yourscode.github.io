多态:
   什么是多态: 同一个函数在不同的情况下表现出不同的状态
   包括两种: 
            重载: 
            重写: 子对象中定义了,和父亲对象中的同名API
            为什么: 子对象觉得父对象中的成员不好用
            如何: 只要在子对象本地
自定义继承: 
    1.仅修改一个对象的父对象
      Object.setPrototypeOf(child,father);
    2.修改所有子对象的父对象
      构造函数.prototype = father
      注意:  在创建子对象之前
    两种类型之间的继承
        1.定义抽象父类型
            1.在构造函数中定义相同部分的属性
            2.在原型对象中定义相同的方法
        2.让子类型继承父类型:
            让子类型构造函数借用父类型构造函数
            结果: 父类型构造函数中的属性全部泄露到全局
            为什么:  一个函数不用  new  也不用  . this默认都指向window
            正确的方法: 1.今后只要函数中的this不是你想要的,可以使用call随意更换为你想要的
                函数.call(正确的对象,其他参数值)
            2.让子类型的原型对象指向父类型的原型对象
                Object.setPrototypeOf(子对象的原型对象,父对象的原型对象);

严格模式:   
    什么是严格模式: 比普通js运行机制要求更加严格的运行模式
    为什么: 解决js中部分饱受诟病的缺陷
    何时;  几乎所有的代码都要运行在严格模式下
    如何使用:  
        1.新项目: 在所有的js文件/script标签的的顶部添加
                "use strict";
        2.旧项目升级: 逐个函数向严格模式迁移
                在函数定义的顶部添加   "use strict";
    规则: 1.禁止给为声明的变量赋值,
                针对的缺陷: 给未声明的变量赋值,会自动在全局创建该变量,造成内存泄漏
          2.将静默失败升级为错误,  什么是静默失败: 既不成功也不报错.
          3.所有普通函数调用和匿名函数中的this不再默认指向window,而是undefined
          4.不再推荐使用  arguments.callee  
                什么是arguments.callee  : 可以在函数调用时,自动获得函数本身
                其实就是禁用递归,因为递归的效率太低了,重复调用率太大
                解决: 几乎所有递归都能用循环代替,
        保护对象: 
        保护属性:
           为什么: 普通js中对象的属性值可以是任何的值,可以随意修改
           如何:   对象的属性分为两大类:
                        命名属性: 可用  .  直接访问到的属性
                        内部属性: 不能用.直接访问到的属性
                如何保护命名属性: 
                    命名属性又分为两大类
                        数据属性: 直接保存属性值的属性
                            如何保护: 每个数据属性都包含四个特征:
                                value:   值    实际存储属性值,
                                writable:  控制当前属性值是否可以修改
                                enumerable: 控制当前属性能否被 for in 遍历到
                                configurable:  控制能否删除该属性,控制能否修改其他属性
                                注意:  configurable一旦改为
                            获取一个属性的四大特征: 
                                var arr = Object.getOwnPropertyDescriptor(obj,"属性名");
                            修改一个属性的四大特征:
                                Object.defineProperty(obj,"属性名",{
                                    特征: 值
                                })
                            问题: 一次只能修改一个属性的四大特征
                            解决: 简写  Object.defineProperties(obj,{属性名称:{特征: 值},属性名称:{特征: 值}})
                        数据属性的问题: 无法用自定义的规则保护属性,
                        解决: 用访问用访问器属性保护数据属性
                        访问器属性: 不实际存储属性值,仅提供对其他数据属性的保护
                        如何: 只能用define.Properties/defineProperty方法添加,
                        访问器属性的用法: 和普通数据数据属性的用法完全一样
                            不自己调用get和set方法,
                                原理: 当试图获取属性值时,其实调用get
                                    当试图修改属性值时,其实调用set方法