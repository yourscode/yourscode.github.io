匿名函数: 匿名函数是一个没有名称的函数,只能用一次使用匿名函数完成升序排序
使用匿名函数完成升序排序
var arr = [12,6,56];
arr.sort(function(a,b){return( a-b)});
使用匿名函数完成降序排序
arr.sort(function(a,b){return b-a;});
进出栈操作
   js是按照标准的栈式操作访问数据的
所谓的栈式操作的特点就是"后进先出"
push();
   入栈,在栈顶(数组的尾部)添加指定的元素,并返回新数组的长度
   arr.push(元素);
pop();
  出栈,在栈顶(数组尾部)删除元素,并返回删除的元素
    arr.pop();
shift();
  删除数组尾部(最后一个元素)的元素,并返回被删除的元素
  arr.shift();
unshift();
    在数组的头部元素位置处添加新的元素,函数的返回值为数组的长度
String 
  VS数组:  相同1.下标    2.length   3.遍历  4.slice(start,[end])
           不同 类型不同   API不同
大小写转换:   
   str.toUpperCase();   //转大写
   str.toLowerCase();   //转小写

var str = "";
str[i]   =>   str.charAt(i);
var str = "今晚,w8fu"  转换为UniCode码
20170 26202 65292 00119 00056 00102 00117
反向将UniCode码转回字
var char = String.fromCharCode(code);
str.slice(start,end+1);
   强调 : 如果一个API

str.substring(start,end+1)
  用法与slice完全一样
强调: 唯独不支持负数

str.sustr(start,n)
start : start  开始, n : 选n个
注意:  第二个关键字不是下标,所以不用考虑包头不包尾

查找关键词四种方式
1.indexOf()
2.lastIndexOf()
注意点:只能查找到一个固定的关键词,只要关键词 发生变化就 找不到
使用正则表达式判断是否包含关键词
var i = str.search(/reg/);   //里面写正则表达式
如果找到返回str中第一个 符合reg规则的关键词的位置 i
如果找不到 ,返回  -1
问题: 默认所有正则都是区分大小写的
解决方法: 在第二个 / 后面加 i     ignore忽略大小写
问题:  只能获得位置,无法获得本次找到 的敏感词内容
3.获得关键词的内容
zar arr = str.march(/正则表达式/);

两种情况
 1.不加g的情况:  只能返回 一个 找到的关键字
 2.加g的情况下: 返回所有找到的敏感词的内容,保存在数组中    //g的意思是:  global
 注意:   如果找不到,就返回  null
  






正则表达式
   描述一个字符串中字符出现的规律的规则表达式
作用范围: 
   1.按规则模糊查找
   2.验证字符串格式
语法: 
  关键字原文就是最简单的正则
  字符集
什么是字符集: 规定字符串中一位字符上备选字符列表的集合
使用场景: 只要关键词中,一位字符上有多种备选字时
怎么使用:  [备选字列表]
简写: 如果备选 字列表中的部分字符是连续的可简写为:  [x-x],可用省略中间字符
强调: 一个 [] 只能匹配一个字符
一位数字: [0-9]    //1 2 3 4 5 6 7 8 9
一位小写字母:  [A-Z]
一位小写字母;  [a-z]
一位 字母:   [A-Za-z]
一位数字或字母:    [A-Za-z0-9]
一位汉字:  [\u4e00-\u9fa5]
车牌号:   汉字     大写字母  .     字母或数字   京 A . F8888
       [\u4e00-\u9fa5][A-Z].[A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9]
反选:  不包含: [^47]      //不包含4和7这两个数字
预定义字符集:  对常用字符集的更简化写法
  \d :   一位数字 [0-9]
  \w :   一位字母,数字或下划线  [A-Za-z0-9_]
  注意: 只有百分之百匹配时才用\w,如果不应许有  _  那么就使用自定义的
  \s :   一位空字符: 空格 Tab

  .  :  通配符  可以代表一切字符
  注意点: 字符集只能规定字符的内容,无法规定字符的数量
  解决方法: 量词
  什么是量词? 规定一位字符出现次数的规律
  何时使用:   只要规定一位字符出现的次数,都用量词
  如何使用: 字符集量词

  注意点: 量词默认只修饰相邻的前一个字符集  a + b*2  //只修饰b
  包括: 两大类
  1.有明确的数量边界:  {6,8}   //最少6次,最多8次
  {6,}  //最少六次,多了不限制    {6}   //必须六位,不能多也不能少

  车牌号:    [\u4e00-\u9fa5][A-Z].[A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9][A-Z0-9]
            [\u4e00-\u9fa5][A-Z].[A-Z0-9]{5}
2.没有明确边界的
    *   表示可有可无 ,数量不限
    ?   表示可有可无,最多一个
    +   表示至少一个,多了不限制
选择和分组 
   选择:   或
   使用场景:  多个规则匹配其一即可
   规律1|规律2|....
   分组:   (规则1规则2)  将多个规则,包裹为一组
   使用场景:    只要希望一个量词同时修饰多个字符集时,都要先将字符集包裹为一组,再用量词修饰整个分组
   例如:  手机号 
    +86 或 0086   可有可无,最多一个
    空格符       可有可无,多了不限
    1            第一位数
    345789      挑一个
    九位数
手机号格式:    (+86|0086)?\s*1[345789]\d{9}


**面试**注意点: 邮箱的正则表达式: : 

匹配位置:
^    字符串的开头

$    字符串的结尾
什么时候使用: 仅在匹配字符串开头或结尾的内容时
比如:   在开头的空字符 ^\s+
        开头和结尾的空字符   ^\s+|\s+$
\b    单词的边界:   ^  $  空字符  标点
no zuo no dai nothing nano
选择单词 no      \bno\b       //选中单词b

选择单词的首字母   \b[a-z]    //选中单词首字母



什么是替换:  将找到的关键词替换成指定的内容
简单替换:(将所有敏感词无差别的统一替换)
关键词固定:
str = str.replace("关键词","替换值");
注意:  无权直接替换原字符串,只能返回新字符串,必须用变量接收替换后的新字符串
问题: 只能替换一个关键字词

关键词变化
 str = str.replace(/正则/ig)

高级替换
    根据不同敏感词,动态替换不同的值
    str = str.replace(/正则/ig,function(kw){
        //kw  会自动接收到,当前找到的一个关键词
        return  根据 kw的不同,返回不同的值1
    })










